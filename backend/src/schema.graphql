type Query {
  user(email: String, password: String, token: String): User
  assignment(ID: ID!): Assignment
  problem(ID: ID!): Problem
  Grade(ID: ID!): Grade
}

type Mutation {
  createUser(data: CreateUserInput!): ReturnMessage!
  deleteUser(email: String!): ReturnMessage!
  updateUserInfo(data: UpdateUserInfo!): ReturnMessage!
  addUserToCourse(data: UpdateUserCourse!): ReturnMessage!
  deleteUserFromCourse(data: UpdateUserCourse!): ReturnMessage!

  createCourse(data: CreateCourseInput!): ReturnMessage!
  deleteCourse(ID: ID!): ReturnMessage!
  updateCourseInfo(data: UpdateCourseInfo!): ReturnMessage!

  createAssignment(data: CreateAssignmentInput!): Assignment!
  deleteAssignment(ID: ID!): [Assignment]

  createProblem(data: CreateProblemInput!): Problem!
  deleteProblem(ID: ID!): [Problem]

  createGrade(data: CreateGradeInput!): Grade!
  deleteGrade(ID: ID!): [Grade]
}

type Subscription {
  user(query: String!): UserSubscriptionPayload!
}

type User {
  name: String!
  email: String!
  studentCourses: [Course]!
  teacherCourses: [Course]!
  password: String!
  token: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInfo {
  name: String
  email: String!
  password: String
}

input UpdateUserCourse {
  email: String!
  ID: ID!
  TA: Boolean!
}

type Course {
  name: String!
  teacher: String!
  describe: String!
  classTime: String!
  classroom: String!
  TAs: [ID]!
  students: [ID]!
  assignments: [ID]!
}

input UpdateCourseInfo {
  ID: ID!
  name: String!
  teacher: String!
  describe: String!
  classTime: String!
  classroom: String!
}

input CreateCourseInput {
  name: String!
  teacher: String!
  describe: String!
  classTime: String!
  classroom: String!
  TAs: ID!
}

type Problem {
  name: String!
  type: String!
  point: Int!
  statement: String!
  options: [String]!
  answers: [String!]!
}

input CreateProblemInput {
  name: String!
  type: String!
  point: Int!
  statement: String!
  options: [String]!
  answers: [String!]!
}

type Assignment {
  courseID: ID!
  name: String!
  beginTime: String!
  endTime: String!
  problems: [ID]!
}

input CreateAssignmentInput {
  courseID: ID!
  name: String!
  beginTime: String!
  endTime: String!
  problems: [ID]!
}

type Grade {
  name: String!
  user: ID!
  course: ID!
  grade: Int
  answers: [String!]!
}

input CreateGradeInput {
  name: String!
  user: ID!
  course: ID!
  grade: Int
  answers: [String!]!
}

type ReturnMessage {
  type: String!
  message: String!
}

enum MutationType {
  CREATED
  DELETED
  UPDATED
}

type UserSubscriptionPayload {
  mutation: MutationType!
  data: User!
}
