type Query {
  user(email: String, password: String, token: String): User
  course(ID: ID!): Course
  assignment(ID: ID!): Assignment
  problem(ID: ID!): Problem
  studentAnswer(query: gradeAnswerInput!): String!
  getGrade(email: String!, ID: ID!): Float!
}

type Mutation {
  createUser(data: CreateUserInput!): ReturnMessage!
  deleteUser(email: String!): ReturnMessage!
  updateUserInfo(data: UpdateUserInfoInput!): ReturnMessage!
  addUserToCourse(data: UpdateUserCourseInput!): ReturnMessage!
  deleteUserFromCourse(data: UpdateUserCourseInput!): ReturnMessage!

  createCourse(data: CreateCourseInput!): ReturnMessage!
  deleteCourse(ID: ID!): ReturnMessage!
  updateCourseInfo(data: UpdateCourseInfoInput!): ReturnMessage!

  createAssignment(data: CreateAssignmentInput!): ReturnMessage!
  deleteAssignment(ID: ID!): ReturnMessage!
  updateAssignmentInfo(data: updateAssignmentInfoInput!): ReturnMessage!

  createProblem(data: CreateProblemInput!): ReturnMessage!
  deleteProblem(ID: ID!): ReturnMessage!
  updateProblemInfo(data: UpdateProblemInfoInput!): ReturnMessage!

  updateAnswer(data: updateAnswerInput!): ReturnMessage!
  updateGrade(data: updateGradeInput!): ReturnMessage!
  showGrade(ID: ID): ReturnMessage!
}

type Subscription {
  user(query: String!): UserSubscriptionPayload!
}

type User {
  name: String!
  email: String!
  studentCourses: [CourseSimple]!
  teacherCourses: [CourseSimple]!
  password: String!
  token: String!
}

input CreateUserInput {
  name: String!
  email: String!
  password: String!
}

input UpdateUserInfoInput {
  name: String
  email: String!
  currentPassword: String
  newPassword: String
}

input UpdateUserCourseInput {
  email: String!
  ID: ID!
  TA: Boolean!
}

type CourseSimple {
  _id: ID!
  name: String!
  teacher: String!
  describe: String!
  classTime: String!
  classroom: String!
  TAs: [ID]!
  students: [ID]!
  assignments: [ID]!
}

type Course {
  _id: ID!
  name: String!
  teacher: String!
  describe: String!
  classTime: String!
  classroom: String!
  TAs: [ID]!
  students: [ID]!
  assignments: [Assignment]!
}

input UpdateCourseInfoInput {
  ID: ID!
  name: String!
  teacher: String!
  describe: String!
  classTime: String!
  classroom: String!
}

input CreateCourseInput {
  name: String!
  teacher: String!
  describe: String!
  classTime: String!
  classroom: String!
  TAs: ID!
}

type Assignment {
  _id: ID!
  courseID: ID!
  name: String!
  beginTime: String!
  endTime: String!
  problems: [ID]!
}

input CreateAssignmentInput {
  courseID: ID!
  name: String!
  beginTime: String!
  endTime: String!
}

input updateAssignmentInfoInput {
  ID: ID!
  name: String!
  beginTime: String!
  endTime: String!
}

type Problem {
  assignmentID: ID!
  type: String!
  point: Float!
  statement: String!
  options: [String]!
  answers: [String!]!
}

input CreateProblemInput {
  type: String!
  point: Float!
  statement: String!
  options: [String]
  answers: [String]
}

input UpdateProblemInfoInput {
  ID: ID!
  type: String!
  point: Float!
  statement: String!
  options: [String]
  answers: [String]
}

type Grade {
  email: String!
  assignmentID: ID!
  grades: [Float]!
  answers: [[String]]!
  graded: Boolean!
}

input updateAnswerInput {
  email: String!
  assignmentID: ID!
  answers: [[String]]!
}

input gradeAnswerInput {
  email: String!
  assignmentID: ID!
  problemID: ID!
}

input updateGradeInput {
  email: String!
  assignmentID: ID!
  problemID: ID!
  givenGrade: Float!
}

type ReturnMessage {
  type: String!
  message: String!
}

enum MutationType {
  CREATED
  DELETED
  UPDATED
}

type UserSubscriptionPayload {
  mutation: MutationType!
  data: User!
}
